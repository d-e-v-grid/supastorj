version: "3.9"

services:
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-storage}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres:/docker-entrypoint-initdb.d:ro
      - ./ssl:/var/lib/postgresql/ssl:ro
    command: >
      postgres 
      -c config_file=/etc/postgresql/postgresql.conf 
      -c ssl=${POSTGRES_SSL:-on}
      -c ssl_cert_file=/var/lib/postgresql/ssl/server.crt
      -c ssl_key_file=/var/lib/postgresql/ssl/server.key
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.max=10000
      -c log_statement=all
      -c log_duration=on
      -c log_min_duration_statement=100
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    networks:
      - supastor

  pg_bouncer:
    image: pgbouncer/pgbouncer:latest
    restart: unless-stopped
    environment:
      DATABASES_HOST: postgres
      DATABASES_PORT: 5432
      DATABASES_USER: ${POSTGRES_USER:-postgres}
      DATABASES_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASES_DBNAME: ${POSTGRES_DB:-storage}
      POOL_MODE: ${PGBOUNCER_POOL_MODE:-transaction}
      SERVER_RESET_QUERY: DISCARD ALL
      MAX_CLIENT_CONN: ${PGBOUNCER_MAX_CLIENT_CONN:-300}
      DEFAULT_POOL_SIZE: ${PGBOUNCER_DEFAULT_POOL_SIZE:-50}
      MAX_DB_CONNECTIONS: ${PGBOUNCER_MAX_DB_CONNECTIONS:-100}
      SERVER_TLS_SSLMODE: ${PGBOUNCER_TLS_SSLMODE:-prefer}
      SERVER_TLS_CA_FILE: /etc/ssl/certs/ca-certificates.crt
    ports:
      - "${PGBOUNCER_PORT:-6432}:6432"
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - supastor

  # External S3 for production - remove MinIO services
  storage:
    image: supabase/storage-api:latest
    restart: unless-stopped
    environment:
      # Server
      SERVER_PORT: 5000
      # Auth
      AUTH_JWT_SECRET: ${JWT_SECRET}
      AUTH_JWT_ALGORITHM: ${JWT_ALGORITHM:-HS256}
      ANON_KEY: ${ANON_KEY}
      SERVICE_KEY: ${SERVICE_KEY}
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-storage}
      DATABASE_POOL_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@pg_bouncer:6432/${POSTGRES_DB:-storage}
      # Migrations
      DB_INSTALL_ROLES: ${DB_INSTALL_ROLES:-true}
      # Storage Backend - use real S3 in production
      STORAGE_BACKEND: s3
      # Production S3 Configuration
      STORAGE_S3_BUCKET: ${STORAGE_S3_BUCKET}
      STORAGE_S3_ENDPOINT: ${STORAGE_S3_ENDPOINT}
      STORAGE_S3_FORCE_PATH_STYLE: ${STORAGE_S3_FORCE_PATH_STYLE:-false}
      STORAGE_S3_REGION: ${STORAGE_S3_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      # Upload Configuration
      UPLOAD_FILE_SIZE_LIMIT: ${UPLOAD_FILE_SIZE_LIMIT:-1073741824}
      UPLOAD_FILE_SIZE_LIMIT_STANDARD: ${UPLOAD_FILE_SIZE_LIMIT_STANDARD:-104857600}
      UPLOAD_SIGNED_URL_EXPIRATION_TIME: ${UPLOAD_SIGNED_URL_EXPIRATION_TIME:-300}
      TUS_URL_PATH: ${TUS_URL_PATH:-/upload/resumable}
      TUS_URL_EXPIRY_MS: ${TUS_URL_EXPIRY_MS:-3600000}
      # Image Transformation
      IMAGE_TRANSFORMATION_ENABLED: ${IMAGE_TRANSFORMATION_ENABLED:-true}
      IMGPROXY_URL: ${IMGPROXY_URL:-http://imgproxy:8080}
      IMGPROXY_REQUEST_TIMEOUT: ${IMGPROXY_REQUEST_TIMEOUT:-30}
      # S3 Protocol
      S3_PROTOCOL_ACCESS_KEY_ID: ${S3_PROTOCOL_ACCESS_KEY_ID}
      S3_PROTOCOL_ACCESS_KEY_SECRET: ${S3_PROTOCOL_ACCESS_KEY_SECRET}
      # Tenant
      TENANT_ID: ${TENANT_ID}
      REGION: ${REGION}
      GLOBAL_S3_BUCKET: ${GLOBAL_S3_BUCKET}
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      # Rate limiting
      RATE_LIMITER_ENABLED: ${RATE_LIMITER_ENABLED:-true}
      RATE_LIMITER_REDIS_URL: redis://redis:6379
    ports:
      - "${STORAGE_PORT:-5000}:5000"
    depends_on:
      postgres:
        condition: service_healthy
      pg_bouncer:
        condition: service_started
      redis:
        condition: service_started
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
    networks:
      - supastor

  postgres-meta:
    image: supabase/postgres-meta:latest
    restart: unless-stopped
    environment:
      PG_META_PORT: 8080
      PG_META_DB_HOST: postgres
      PG_META_DB_PORT: 5432
      PG_META_DB_NAME: ${POSTGRES_DB:-storage}
      PG_META_DB_USER: ${POSTGRES_USER:-postgres}
      PG_META_DB_PASSWORD: ${POSTGRES_PASSWORD}
      PG_META_DB_SSL: ${POSTGRES_SSL:-require}
    ports:
      - "${POSTGRES_META_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "fetch('http://localhost:8080/health').then((r) => {if (r.status !== 200) throw new Error(r.status)})"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    networks:
      - supastor

  imgproxy:
    image: darthsim/imgproxy:latest
    restart: unless-stopped
    environment:
      IMGPROXY_BIND: :8080
      IMGPROXY_USE_ETAG: ${IMGPROXY_USE_ETAG:-true}
      IMGPROXY_ENABLE_WEBP_DETECTION: ${IMGPROXY_ENABLE_WEBP_DETECTION:-true}
      IMGPROXY_JPEG_PROGRESSIVE: ${IMGPROXY_JPEG_PROGRESSIVE:-true}
      IMGPROXY_PNG_INTERLACED: ${IMGPROXY_PNG_INTERLACED:-true}
      IMGPROXY_QUALITY: ${IMGPROXY_QUALITY:-90}
      IMGPROXY_MAX_SRC_RESOLUTION: ${IMGPROXY_MAX_SRC_RESOLUTION:-100}
      IMGPROXY_MAX_SRC_FILE_SIZE: ${IMGPROXY_MAX_SRC_FILE_SIZE:-268435456}
      IMGPROXY_SECRET: ${IMGPROXY_SECRET}
      IMGPROXY_SALT: ${IMGPROXY_SALT}
      IMGPROXY_ENABLE_PROMETHEUS_METRICS: ${IMGPROXY_ENABLE_PROMETHEUS_METRICS:-true}
      IMGPROXY_PROMETHEUS_BIND: :9090
      # Performance optimizations
      IMGPROXY_WORKERS: ${IMGPROXY_WORKERS:-4}
      IMGPROXY_MAX_CLIENTS: ${IMGPROXY_MAX_CLIENTS:-512}
      IMGPROXY_TTL: ${IMGPROXY_TTL:-3600}
      IMGPROXY_CACHE_CONTROL_PASSTHROUGH: ${IMGPROXY_CACHE_CONTROL_PASSTHROUGH:-false}
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - supastor

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory ${REDIS_MAX_MEMORY:-512mb}
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --appendonly yes
      --appendfsync everysec
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    networks:
      - supastor

  # Load balancer for storage API
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - storage
      - postgres-meta
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - supastor

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./config/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - supastor

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning:ro
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_INSTALL_PLUGINS: ${GRAFANA_INSTALL_PLUGINS:-}
    depends_on:
      - prometheus
    networks:
      - supastor

networks:
  supastor:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data: