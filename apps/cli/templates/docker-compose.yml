services:
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_PORT: 5432
    ports:
      - "127.0.0.1:${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "postgres" ]
      interval: 5s
      timeout: 60s
      retries: 20
    networks:
      - supastorj

  pg_bouncer:
    image: bitnami/pgbouncer:latest
    restart: unless-stopped
    environment:
      POSTGRESQL_HOST: postgres
      POSTGRESQL_PORT: 5432
      POSTGRESQL_USERNAME: postgres
      POSTGRESQL_PASSWORD: postgres
      POSTGRESQL_DATABASE: postgres
      PGBOUNCER_POOL_MODE: ${PGBOUNCER_POOL_MODE:-transaction}
      PGBOUNCER_IGNORE_STARTUP_PARAMETERS: "extra_float_digits,options"
      PGBOUNCER_STATS_USERS: postgres
      PGBOUNCER_MAX_CLIENT_CONN: ${PGBOUNCER_MAX_CLIENT_CONN:-100}
      PGBOUNCER_DEFAULT_POOL_SIZE: ${PGBOUNCER_DEFAULT_POOL_SIZE:-20}
    ports:
      - "127.0.0.1:${PGBOUNCER_PORT:-6432}:6432"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - supastorj

  minio:
    image: minio/minio:latest
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-supastorj}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-supastor123}
      MINIO_DEFAULT_BUCKETS: ${MINIO_DEFAULT_BUCKETS:-storage}
    ports:
      - "127.0.0.1:${MINIO_PORT:-9000}:9000"
      - "127.0.0.1:${MINIO_CONSOLE_PORT:-9001}:9001"
    command: server /data --console-address ":9001"
    healthcheck:
      test: timeout 5s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
      interval: 5s
      timeout: 20s
      retries: 10
    networks:
      - supastorj

  minio_setup:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-supastorj}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-supastor123}
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set minio http://minio:9000 $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD};
      /usr/bin/mc mb minio/storage || true;
      /usr/bin/mc anonymous set public minio/storage;
      exit 0;
      "
    networks:
      - supastorj

  # Storage with S3 backend (default)
  storage:
    image: supabase/storage-api:latest
    restart: unless-stopped
    environment:
      # Server
      SERVER_PORT: 5000
      # Auth
      AUTH_JWT_SECRET: ${JWT_SECRET}
      AUTH_JWT_ALGORITHM: ${JWT_ALGORITHM:-HS256}
      ANON_KEY: ${ANON_KEY}
      SERVICE_KEY: ${SERVICE_KEY}
      # Database
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres
      DATABASE_POOL_URL: postgresql://postgres:postgres@pg_bouncer:6432/postgres
      # Migrations
      DB_INSTALL_ROLES: ${DB_INSTALL_ROLES:-true}
      # Storage Backend
      STORAGE_BACKEND: ${STORAGE_BACKEND:-s3}
      # S3 Configuration
      STORAGE_S3_BUCKET: ${STORAGE_S3_BUCKET:-storage}
      STORAGE_S3_ENDPOINT: ${STORAGE_S3_ENDPOINT:-http://minio:9000}
      STORAGE_S3_FORCE_PATH_STYLE: ${STORAGE_S3_FORCE_PATH_STYLE:-true}
      STORAGE_S3_REGION: ${STORAGE_S3_REGION:-us-east-1}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-${MINIO_ROOT_USER:-supastorj}}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-${MINIO_ROOT_PASSWORD:-supastor123}}
      # File Storage (fallback)
      FILE_STORAGE_BACKEND_PATH: /var/lib/storage
      # Upload Configuration
      UPLOAD_FILE_SIZE_LIMIT: ${UPLOAD_FILE_SIZE_LIMIT:-524288000}
      UPLOAD_FILE_SIZE_LIMIT_STANDARD: ${UPLOAD_FILE_SIZE_LIMIT_STANDARD:-52428800}
      UPLOAD_SIGNED_URL_EXPIRATION_TIME: ${UPLOAD_SIGNED_URL_EXPIRATION_TIME:-120}
      TUS_URL_PATH: ${TUS_URL_PATH:-/upload/resumable}
      TUS_URL_EXPIRY_MS: ${TUS_URL_EXPIRY_MS:-3600000}
      # Image Transformation
      IMAGE_TRANSFORMATION_ENABLED: ${IMAGE_TRANSFORMATION_ENABLED:-false}
      IMGPROXY_URL: ${IMGPROXY_URL:-http://imgproxy:8080}
      IMGPROXY_REQUEST_TIMEOUT: ${IMGPROXY_REQUEST_TIMEOUT:-15}
      # S3 Protocol
      S3_PROTOCOL_ACCESS_KEY_ID: ${S3_PROTOCOL_ACCESS_KEY_ID}
      S3_PROTOCOL_ACCESS_KEY_SECRET: ${S3_PROTOCOL_ACCESS_KEY_SECRET}
    ports:
      - "127.0.0.1:${STORAGE_PORT:-5000}:5000"
    depends_on:
      postgres:
        condition: service_healthy
      pg_bouncer:
        condition: service_started
      minio_setup:
        condition: service_completed_successfully
    networks:
      - supastorj

  postgres-meta:
    image: supabase/postgres-meta:v0.91.0
    restart: unless-stopped
    environment:
      PG_META_PORT: 5001
      PG_META_DB_HOST: postgres
      PG_META_DB_PORT: 5432
      PG_META_DB_NAME: postgres
      PG_META_DB_USER: postgres
      PG_META_DB_PASSWORD: postgres
      PG_META_DB_SSL: disable
    ports:
      - "127.0.0.1:${POSTGRES_META_PORT:-5001}:5001"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "fetch('http://localhost:5001/health').then((r) => {if (r.status !== 200) throw new Error(r.status)})"]
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      - supastorj

  imgproxy:
    image: darthsim/imgproxy
    restart: unless-stopped
    environment:
      IMGPROXY_BIND: :8080
      IMGPROXY_LOCAL_FILESYSTEM_ROOT: /var/lib/storage
      IMGPROXY_USE_ETAG: ${IMGPROXY_USE_ETAG:-true}
      IMGPROXY_ENABLE_WEBP_DETECTION: ${IMGPROXY_ENABLE_WEBP_DETECTION:-true}
      IMGPROXY_JPEG_PROGRESSIVE: ${IMGPROXY_JPEG_PROGRESSIVE:-false}
      IMGPROXY_PNG_INTERLACED: ${IMGPROXY_PNG_INTERLACED:-false}
      IMGPROXY_QUALITY: ${IMGPROXY_QUALITY:-95}
      IMGPROXY_MAX_SRC_RESOLUTION: ${IMGPROXY_MAX_SRC_RESOLUTION:-50}
      IMGPROXY_MAX_SRC_FILE_SIZE: ${IMGPROXY_MAX_SRC_FILE_SIZE:-104857600}
      IMGPROXY_SECRET: ${IMGPROXY_SECRET:-}
      IMGPROXY_SALT: ${IMGPROXY_SALT:-}
    volumes:
      - ./data:/images/data
    networks:
      - supastorj
    profiles:
      - imgproxy
      - full

  # Optional: Redis for rate limiting and caching
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-supastor123}
    ports:
      - "127.0.0.1:${REDIS_PORT:-6379}:6379"
    networks:
      - supastorj
    profiles:
      - redis
      - full

networks:
  supastorj:
    driver: bridge